{
	// JEST
  "(jest) Describe": {
    "prefix": ["describe", "jdescribe"],
    "body": ["describe('${1:What do you want to describe ?}', () => {\n\t${2}\n})\n"],
		"scope": "javascript,typescript"
  },

	"(jest) It": {
    "prefix": ["it", "jit"],
    "body": ["it('${1:What do you want to test ?}', () => {\n\t${2}\n})\n"],
		"scope": "javascript,typescript"
  },

	"(jest) Given when then": {
		"prefix": ["gwt", "given"],
    "body": ["// given\nconst ${1:defaultValue} = false\n\n// when\nconst ${4:result} = ${2}(${1})\n\n// then\nexpect(${4}).toBeTruthy()\n"],
		"scope": "javascript,typescript"
	},

	// Routes
	"(creme) Route Express": {
		"prefix": ["route"],
    "body": ["app.${1:get}('/',oauthMiddleware, async (req: Request, res: Response) => {\n\ttry {\n\t\tres.send(${3:myService}());\n\t} catch (err) {\n\t\tlogger.error(err);\n\t}\n})"],
		"scope": "javascript,typescript"
	},

	// App-service
	"(creme) App Service": {
		"prefix": ["service"],
    "body": ["app.${1:get}('/',oauthMiddleware, async (req, res) => {\n\ttry {\n\t\tres.send(${3:myService}());\n\t} catch (err) {\n\t\tlogger.error(err);\n\t}\n})"],
		"scope": "javascript,typescript"
	},

	// App-service
	"(creme) hydrate": {
		"prefix": ["hydrate"],
		"body": ["async (${1:item}) => ({\n\t...${1},\n\t${2:key}: await ${3:getById}(${1}.${4:id})\n})"],
		"scope": "javascript,typescript"
	},
}